plugins {
    id("scala")
}

apply from: "$rootDir/gradle/instrumentation.gradle"

def scalaVersion = "2.13"
def otel4sVersion = "0.13.1"

muzzle {
    pass {
        group.set("org.typelevel")
        module.set("otel4s-oteljava-context-storage_2.13")
        versions.set("[$otel4sVersion,)")
        assertInverse.set(true)
    }
    pass {
        group.set("org.typelevel")
        module.set("otel4s-oteljava-context-storage_3")
        versions.set("[$otel4sVersion,)")
        assertInverse.set(true)
    }
}

tasks.named('compileJava') {
    dependsOn(":instrumentation:cats-effect-common-3.6:byteBuddyJava")
}

dependencies {

    // we need access to the "application.io.opentelemetry.context.Context"
    // to properly bridge fiber and agent context storages
    //compileOnly(project(":opentelemetry-api-shaded-for-instrumenting", configuration = "shadow"))
    compileOnly project(path: ":opentelemetry-api-shaded-for-instrumenting", configuration: "shadow")
    implementation("io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-opentelemetry-api-1.0:${versions.opentelemetryJavaagentAlpha}")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling")
    compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure")

    compileOnly(project(":instrumentation:cats-effect-common-3.6"))
    implementation(project(":instrumentation:cats-effect-common-3.6"))

    // otel4s
    compileOnly("org.typelevel:otel4s-oteljava-context-storage_$scalaVersion:$otel4sVersion")

    testImplementation("org.typelevel:otel4s-oteljava_$scalaVersion:$otel4sVersion")
    testImplementation("org.typelevel:otel4s-oteljava-context-storage_$scalaVersion:$otel4sVersion")

    // bring cats-effect instrumentation
    testInstrumentation(project(":instrumentation:cats-effect-3.6"))
}

tasks.withType(Test).configureEach {
    jvmArgs "-Dio.opentelemetry.javaagent.shaded.io.opentelemetry.context.enableStrictContext=false"
    jvmArgs "-Dcats.effect.trackFiberContext=true"
}
