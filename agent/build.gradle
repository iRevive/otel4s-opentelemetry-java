import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id("maven-publish")
  id("signing")
  id("com.gradleup.shadow")
}

apply from: "$rootDir/gradle/shadow.gradle"

def relocatePackages = ext.relocatePackages

configurations {
  // this configuration collects libs that will be placed in the bootstrap classloader
  bootstrapLibs {
    canBeResolved = true
    canBeConsumed = false
  }
  // this configuration collects libs that will be placed in the agent classloader, isolated from the instrumented application code
  javaagentLibs {
    canBeResolved = true
    canBeConsumed = false
  }
  // this configuration stores the upstream agent dep that's extended by this project
  upstreamAgent {
    canBeResolved = true
    canBeConsumed = false
  }
}

dependencies {
  bootstrapLibs(project(":bootstrap"))

  javaagentLibs(project(":custom"))
  javaagentLibs(project(":instrumentation:cats-effect-common-3.6"))
  javaagentLibs(project(":instrumentation:cats-effect-3.6"))
  javaagentLibs(project(":instrumentation:otel4s-0.13"))

  upstreamAgent("io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}")
}

CopySpec isolateClasses(Iterable<File> jars) {
  return copySpec {
    jars.forEach {
      from(zipTree(it)) {
        into("inst")
        rename("^(.*)\\.class\$", "\$1.classdata")
        // Rename LICENSE file since it clashes with license dir on non-case sensitive FSs (i.e. Mac)
        rename("^LICENSE\$", "LICENSE.renamed")
        exclude("META-INF/INDEX.LIST")
        exclude("META-INF/*.DSA")
        exclude("META-INF/*.SF")
        exclude("META-INF/maven/**")
        exclude("META-INF/MANIFEST.MF")
      }
    }
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

tasks {
  jar {
    enabled = false
  }

  // building the final javaagent jar is done in 3 steps:

  // 1. all distro specific javaagent libs are relocated
  task relocateJavaagentLibs(type: ShadowJar) {
    configurations = [project.configurations.javaagentLibs]

    duplicatesStrategy = DuplicatesStrategy.FAIL

    archiveFileName.set("javaagentLibs-relocated.jar")

    mergeServiceFiles()
    exclude("**/module-info.class")
    relocatePackages(it)

    // exclude known bootstrap dependencies - they can't appear in the inst/ directory
    dependencies {
      exclude("io.opentelemetry:opentelemetry-api")
      exclude("io.opentelemetry:opentelemetry-common")
      exclude("io.opentelemetry:opentelemetry-context")
      exclude("io.opentelemetry.semconv:opentelemetry-semconv")
      exclude("io.opentelemetry.semconv:opentelemetry-semconv-incubating")
      // events API and metrics advice API
      exclude("io.opentelemetry:opentelemetry-api-incubator")
    }
  }

  // 2. the distro javaagent libs are then isolated - moved to the inst/ directory
  // having a separate task for isolating javaagent libs is required to avoid duplicates with the upstream javaagent
  // duplicatesStrategy in shadowJar won't be applied when adding files with with(CopySpec) because each CopySpec has
  // its own duplicatesStrategy
  task isolateJavaagentLibs(type: Copy) {
    dependsOn(tasks.relocateJavaagentLibs)
    with isolateClasses(tasks.relocateJavaagentLibs.outputs.files)

    into(layout.buildDirectory.dir("isolated/javaagentLibs"))
  }

  // 3. the relocated and isolated javaagent libs are merged together with the bootstrap libs (which undergo relocation
  // in this task) and the upstream javaagent jar; duplicates are removed
  shadowJar {
    configurations = [project.configurations.bootstrapLibs, project.configurations.upstreamAgent]

    dependsOn(tasks.isolateJavaagentLibs)
    from(tasks.isolateJavaagentLibs.outputs)

    archiveClassifier.set("all")

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    mergeServiceFiles {
      include("inst/META-INF/services/*")
    }
    exclude("**/module-info.class")
    relocatePackages(it)

    archiveFileName = "otel4s-opentelemetry-javaagent.jar"

    manifest {
      attributes.put("Main-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Agent-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Premain-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
      attributes.put("Can-Redefine-Classes", "true")
      attributes.put("Can-Retransform-Classes", "true")
      attributes.put("Implementation-Vendor", "otel4s") // todo should be the org
      attributes.put("Implementation-Version", "otel4s-${project.version}-otel-${versions.opentelemetryJavaagent}")
    }
  }

  // a separate task to create a no-classifier jar that's exactly the same as the -all one
  // because a no-classifier (main) jar is required by sonatype
  tasks.register('mainShadowJar', Jar) {
    archiveClassifier.set('')

    from(zipTree(tasks.named('shadowJar').get().archiveFile))

    manifest {
      attributes(tasks.named('shadowJar').get().manifest.attributes)
    }
  }

  assemble {
    dependsOn(shadowJar, mainShadowJar)
  }

  publishing {
    publications {
      maven(MavenPublication) {
        groupId = "io.github.irevive"
        artifactId = "otel4s-opentelemetry-javaagent"
        version = project.version.toString()

        artifact(mainShadowJar)
        artifact(tasks.named('sourcesJar').get())
        artifact(tasks.named("javadocJar").get())

        pom {
          name.set("otel4s Distribution of OpenTelemetry Java")
          description.set("A distribution of the OpenTelemetry Instrumentation for Java project")
          url.set("https://github.com/iRevive/otel4s-opentelemetry-java")
          packaging = "jar"

          licenses {
            license {
              name.set("The Apache License, Version 2.0")
              url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
            }
          }

          developers {
            developer {
              //id.set("id")
              name.set("Maksym Ochenashko")
              email.set("maxochenashko@gmail.com")
              //organization.set("org")
              //organizationUrl.set("org-url")
            }
          }

          scm {
            connection.set("https://github.com/iRevive/otel4s-opentelemetry-java.git")
            developerConnection.set("https://github.com/iRevive/otel4s-opentelemetry-java.git")
            url.set("https://github.com/iRevive/otel4s-opentelemetry-java")
          }
        }
      }
    }
  }

  def gpgSecretKey = System.getenv("GPG_SECRET_KEY")
  def gpgPassword = System.getenv("GPG_PASSWORD")

  if (gpgSecretKey != null && gpgPassword != null) {
    signing {
      useInMemoryPgpKeys(gpgSecretKey, gpgPassword)
      sign publishing.publications.maven
    }
  }

}
